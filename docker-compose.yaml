version: '3.8'

services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: challenge-v4-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: >
      sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-server --requirepass $$REDIS_PASSWORD --appendonly yes
        else
          redis-server --appendonly yes
        fi
      "
    networks:
      - challenge-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: challenge-v4-backend
    restart: unless-stopped
    ports:
      - '${PORT:-8080}:${PORT:-8080}'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-8080}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_WHITELIST=${CORS_WHITELIST:-http://localhost:3000,http://localhost:8080}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_CREDENTIALS_PATH=${FIREBASE_CREDENTIALS_PATH:-./serviceAccount.json}
      - EMAIL_SERVICE=${EMAIL_SERVICE:-mock}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
    volumes:
      - .:/app
      - /app/node_modules
      - ./serviceAccount.json:/app/serviceAccount.json:ro
    networks:
      - challenge-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${PORT:-8080}/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Admin UI (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: challenge-v4-redis-ui
    restart: unless-stopped
    ports:
      - '8081:8081'
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - challenge-network
    depends_on:
      - redis
    profiles:
      - tools # Only start with --profile tools

volumes:
  redis_data:
    driver: local

networks:
  challenge-network:
    driver: bridge
